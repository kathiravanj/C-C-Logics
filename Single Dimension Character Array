1. Function to return a random lowercase letter
65 - 90 ==> upper case
97-122 ==> lower case

char getRandomChar(){
  int a = rand_range(97,122);
  char c = a;
  return a;
  }

2. Fill the character array with random lower case letters.
size = get array size from user
void fillArray(char* letters, int size){
  for(i=0;i<size;i++){
    letters[i] = getRandomChar()
  }
}

3.Frequency of a character in the array
int getFrequencyOf(char letters*, int size, char item){
  int frequency = 0;
  for(i=0;i<size;i++){
    if letters[i] == item{
      frequency++;
    }
  }
  return frequency;
}

4. Remove all instances of a specific character from array
void removeCharacter(char letters*, int size, char item){
for(i=0;i<size;i++){
    if letters[i] == item{
        for(j=i; j<size; j++){
            letters[j] = letters[j+1];
            }
      }
    }
}

5. sort array alphabetically - bubble sort works too.
Lets try Merge or shell or quick sort
void sortArray(char letters*, int size){

}

quick sort
==========
#include <stdio.h>

void quicksort(int list[], int low, int high)
{
    int pivot, i, j, temp;
    if (low < high) // run only for more than one element in array
    {
        pivot = low; // set pivot as first element
        i = low; // set low index as first element
        j = high; // set high index as last element
        while (i < j) // we dont want low and high index to meet
        {
            while (list[i] <= list[pivot] && i <= high)
            {
                i++; // move low index till you find a number greater than pivot element
            }
            while (list[j] > list[pivot] && j >= low)
            {
                j--; // Move high index back till you find a number less than pivot element
            }
            if (i < j) // if low index pointing big number and high index pointing small number then swap
            {
                temp = list[i];
                list[i] = list[j];
                list[j] = temp;
            }
        } // continue until i < j
        temp = list[j]; // number on high index and number on pivot
        list[j] = list[pivot];
        list[pivot] = temp;
        quicksort(list, low, j - 1);
        quicksort(list, j + 1, high);
    }
}

int main()
{
    int a[] = {40, 20, 10, 30, 7, 50, 60, 80, 100};
    int i;
    int asize = 9;
    quicksort(a,0,asize-1);
    for (i=0; i<asize; i++){
        printf("%d",a[i]);
        printf("\n");
    }
    return 0;
}

//Set pivot, low and high index
40 20 10 80 60 50 7 30 100
P                       j
i

//Move low index as long the elements are less than pivot number and low index <= high index
40 20 10 80 60 50 7 30 100
P  i                    j

40 20 10 80 60 50 7 30 100
P      i                j

//Stop low index after finding an element greater than pivot number
40 20 10 80 60 50 7 30 100
P        i              j

//Move high index as long as the elements are greater than pivot number and high index >= low index
40 20 10 80 60 50 7 30 100
P        i           j

//Stop high index after finding an element lesser than pivot number
40 20 10 80 60 50 7 30 100
P        i           j

//swap low and high index
40 20 10 30 60 50 7 80 100
P        i           j

//continue until i < j
40 20 10 30 60 50 7 80 100
P           i       j

40 20 10 30 60 50 7 80 100
P           i     j  

//swap again
40 20 10 30 7 50 60 80 100
P           i     j  

//continue until i < j
40 20 10 30 7 50 60 80 100
P             i   
              j  
              
40 20 10 30 7 50 60 80 100
P           j i   

// i is not < j so no swapping
//swap j and pivot out of the loop
7 20 10 30 40 50 60 80 100
P           j  i  

// Now we got two sub-arrays on the left of j(40) with elements lesser than 40 
// and on the right j(40) elements greater than 40

//call quicksort for low to j-1
7 20 10 30

//call quicksort for j+1 to high
50 60 80 100

Use the same program to sort char array

#include <stdio.h>

void quicksort(char list[], int low, int high)
{
    int pivot, i, j, temp;
    if (low < high) // run only for more than one element in array
    {
        pivot = low; // set pivot as first element
        i = low; // set low index as first element
        j = high; // set high index as last element
        while (i < j) // we dont want low and high index to meet
        {
            while (list[i] <= list[pivot] && i <= high)
            {
                i++; // move low index till you find a number greater than pivot element
            }
            while (list[j] > list[pivot] && j >= low)
            {
                j--; // Move high index back till you find a number less than pivot element
            }
            if (i < j) // if low index pointing big number and high index pointing small number then swap
            {
                temp = list[i];
                list[i] = list[j];
                list[j] = temp;
            }
        } // continue until i < j
        temp = list[j]; // number on high index and number on pivot
        list[j] = list[pivot];
        list[pivot] = temp;
        quicksort(list, low, j - 1);
        quicksort(list, j + 1, high);
    }
}

int main()
{
    char a[] = {'p', 'f', 'i', 'l', 'e', 's', 'u', 'v', 'z'};
    int i;
    int asize = 9;
    quicksort(a,0,asize-1);
    for (i=0; i<asize; i++){
        printf("%c",a[i]);
        printf("\n");
    }
    return 0;
}
