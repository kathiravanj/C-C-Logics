1. arr_size <--- input from user

2. Create an integer array int_arr based on that size

3. min_value <--- input from user
   max_value <--- input from user

4. Use range_range() method that we created in the previous assignment to generate random numbers between min_value and max_value
   Fill the array with the random numbers

5. Use Bubble sort to sort the array

/* Bubble sort */
 for(i=0;i<arr_size-1;i++)
 {
 for(j=i+1;j<arr_size;j++)
 {
 if(int_arr[i] > int_arr[j])
 {
 temp=int_arr[i];
 int_arr[i] = int_arr[j];
 int_arr[j] = temp;
 }
 }
 }
 
 6. Display the contents of array using for loop
  for(i=0;i<arr_size;i++)
    printf("%d",int_arr[i]);

7. Calculate average of the array.
int sum = 0; 
for (int i=0; i<arr_size; i++) 
   sum += int_arr[i]; 
print(sum/int_arr)

8. Calculate Median of the array.
Median of a sorted array of size n is defined as the middle element when n is odd and average of middle two elements when n is even.

if (arr_size % 2 != 0) #check for odd number
    print int_arr[arr_size+1/2]; 
else #even number
    print (int_arr[arr_size/2]+a[(arr_size+2)/2] )/2
       
9. Number of unique elements in the array.
#include<stdio.h> 
int main() 
{
int size, i, j,c=0;
size = 5;
int array[] = { 12, 2, 10, 10, 45 }; 

for(i = 0; i < size; i++) 
    {
    for (j=0; j<i; j++)
        {
        if (array[i] == array[j])
        break;
        }  
    if (i == j)
        {
/* No duplicate element found between index 0 to i */
        printf("%d -- %d",i,j);
        printf("\n");
        c++;
        }
    }  
printf("%d",c);
 return 0;
}
